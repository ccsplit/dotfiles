# -*- coding: utf-8 -*-
"""Best goddamn .pythonrc file in the whole world.

This file is executed when the Python interactive shell is started if
$PYTHONSTARTUP is in your environment and points to this file. It's just
regular Python commands, so do what you will. Your ~/.inputrc file can greatly
complement this file.

"""
# Imports we need
import sys
import os
import readline
import rlcompleter
import atexit
import pprint
from tempfile import mkstemp
from code import InteractiveConsole

# Imports we want
import datetime
import pdb

# Imports for Pentesting stuff
import hashlib
import base64
import urllib

AUTHOR = 'Seth House <seth@eseth.com>'

# Color Support
###############

try:
    if get_ipython():
        sys.exit(0)
except NameError:
    pass

class TermColors(dict):
    """Gives easy access to ANSI color codes. Attempts to fall back to no color
    for certain TERM values. (Mostly stolen from IPython.)"""

    COLOR_TEMPLATES = (
        ("Black", "0;30"),
        ("Red", "0;31"),
        ("Green", "0;32"),
        ("Brown", "0;33"),
        ("Blue", "0;34"),
        ("Purple", "0;35"),
        ("Cyan", "0;36"),
        ("LightGray", "0;37"),
        ("DarkGray", "1;30"),
        ("LightRed", "1;31"),
        ("LightGreen", "1;32"),
        ("Yellow", "1;33"),
        ("LightBlue", "1;34"),
        ("LightPurple", "1;35"),
        ("LightCyan", "1;36"),
        ("White", "1;37"),
        ("Normal", "0"),
    )

    NoColor = ''
    _base  = '\001\033[%sm\002'

    def __init__(self):
        if os.environ.get('TERM') in ('xterm-color', 'xterm-256color', 'linux',
                                      'screen', 'screen-256color', 'screen-bce'
                                      ):
            self.update(dict([(k, self._base % v)
                              for k, v in self.COLOR_TEMPLATES]))
        else:
            self.update(dict([(k, self.NoColor)
                              for k, v in self.COLOR_TEMPLATES]))


_c = TermColors()

# Enable a History
##################

HISTFILE = r"%s/.pyhistory" % os.environ["HOME"]

# Read the existing history if there is one
if os.path.exists(HISTFILE):
    readline.read_history_file(HISTFILE)

# Set maximum number of items that will be written to the history file
readline.set_history_length(300)


def savehist():
    readline.write_history_file(HISTFILE)


atexit.register(savehist)

# Enable Color Prompts
######################

sys.ps1 = '%s>>> %s' % (_c['Green'], _c['Normal'])
sys.ps2 = '%s... %s' % (_c['Red'], _c['Normal'])

# Enable Pretty Printing for stdout
###################################


def my_displayhook(value):
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            if not isinstance(__builtins__, dict):
                __builtins__._ = value

        pprint.pprint(value)


sys.displayhook = my_displayhook

# Welcome message
#################

WELCOME = """\
%(Cyan)s
You've got color, history, and pretty printing.
(If your ~/.inputrc doesn't suck, you've also
got completion and vi-mode keybindings.)
%(Brown)s
Type \e to get an external editor.
%(Normal)s""" % _c

atexit.register(lambda: sys.stdout.write("""%(DarkGray)s
Sheesh, I thought he'd never leave. Who invited that guy?
%(Normal)s""" % _c))

# Custom Pentest-related items
###########################
try:
    import urllib.parse
    uq = urllib.parse.unquote
    qu = urllib.parse.quote
    qp = urllib.parse.quote_plus
except ImportError:
    # Python 2.x
    uq = urllib.unquote
    qu = urllib.quote
    qp = urllib.quote_plus

try:
    ds = base64.decodestring
    es = base64.encodestring
except:
    ds = base64.b64decode
    es = base64.b64encode
ues = base64.urlsafe_b64encode
uds = base64.urlsafe_b64decode


class HashFunctions(object):
    def __init__(self):
        for h in hashlib.algorithms_available:
            setattr(self, h, self.create_hash_func(h))

    def create_hash_func(self, name):
        if os.sys.version_info.major == 3:
            return lambda x: hashlib.new(name, x.encode('UTF-8')).hexdigest()
        else:
            return lambda x: hashlib.new(name, x).hexdigest()


hashes = HashFunctions()
md5 = hashes.md5
sha1 = hashes.sha1
sha224 = hashes.sha224
sha256 = hashes.sha256
sha384 = hashes.sha384
sha512 = hashes.sha512


def rot_n(encodedMsg, n):
    # lets make everything lower case
    decodedMsg = ''
    for char in list(encodedMsg):
        if char.isalpha():
            value = ord(char) + n
            if value > ord('z'):
                value = (value - ord('z')) + ord('a') - 1
            decodedMsg += unichr(value)
        else:
            decodedMsg += char
    return decodedMsg

def download_file(url):
    local_filename = url.split("/")[-1]
    # NOTE the stream=True parameter below
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        with open(local_filename, "wb") as f:
            for chunk in r.iter_content(chunk_size=8192):
                # If you have chunk encoded response uncomment if
                # and set chunk_size parameter to None.
                # if chunk:
                f.write(chunk)
    return local_filename

# Django Helpers
################

def SECRET_KEY():
    "Generates a new SECRET_KEY that can be used in a project settings file."

    from random import choice
    return ''.join(
            [choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)')
                for i in range(50)])


# If we're working with a Django project, set up the environment
if 'DJANGO_SETTINGS_MODULE' in os.environ:
    try:
        from django.db.models.loading import get_models
    except ImportError:
        from django.apps import apps
        get_models = apps.get_models
    from django.test.client import Client
    from django.test.utils import setup_test_environment, teardown_test_environment
    from django.conf import settings as S

    class DjangoModels(object):
        """Loop through all the models in INSTALLED_APPS and import them."""
        def __init__(self):
            for m in get_models():
                setattr(self, m.__name__, m)

    print("Getting models.")
    A = DjangoModels()
    print("Getting test client")
    C = Client()

    WELCOME += """%(Green)s
Django environment detected.
* Your INSTALLED_APPS models are available as `A`.
* Your project settings are available as `S`.
* The Django test client is available as `C`.
%(Normal)s""" % _c

    print("Setup test environment")
    setup_test_environment()
    S.DEBUG_PROPAGATE_EXCEPTIONS = True

    WELCOME += """%(LightPurple)s
Warning: the Django test environment has been set up; to restore the
normal environment call `teardown_test_environment()`.

Warning: DEBUG_PROPAGATE_EXCEPTIONS has been set to True.
%(Normal)s""" % _c


# Salt Helpers
##############
if 'SALT_MASTER_CONFIG' in os.environ:
    try:
        import salt.config
        import salt.client
        import salt.runner
    except ImportError:
        pass
    else:
        __opts_master__ = salt.config.master_config(
                os.environ['SALT_MASTER_CONFIG'])

        # Instantiate LocalClient and RunnerClient
        SLC = salt.client.LocalClient(__opts_master__)
        SRUN = salt.runner.Runner(__opts_master__)

if 'SALT_MINION_CONFIG' in os.environ:
    try:
        import salt.config
        import salt.loader
        import jinja2
        import yaml
    except ImportError:
        pass
    else:
        # Create the Salt __opts__ variable
        __opts__ = salt.config.client_config(os.environ['SALT_MINION_CONFIG'])

        # Populate grains if it hasn't been done already
        if 'grains' not in __opts__ or not __opts__['grains']:
            __opts__['grains'] = salt.loader.grains(__opts__)

        # Populate template variables
        __salt__ = salt.loader.minion_mods(__opts__)
        __grains__ = __opts__['grains']
        __pillar__ = salt.pillar.get_pillar(
            __opts__,
            __grains__,
            __opts__['id'],
            __opts__.get('environment'),
        ).compile_pillar()

        JINJA = lambda x, **y: jinja2.Template(x).render(
                grains=__grains__,
                salt=__salt__,
                opts=__opts__,
                pillar=__pillar__,
                **y)

# Start an external editor with \e
##################################
# http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/438813/

EDITOR = os.environ.get('EDITOR', 'vi')
EDIT_CMD = '\e'


class EditableBufferInteractiveConsole(InteractiveConsole):
    def __init__(self, *args, **kwargs):
        self.last_buffer = []  # This holds the last executed statement
        InteractiveConsole.__init__(self, *args, **kwargs)

    def runsource(self, source, *args):
        self.last_buffer = [source.encode('utf-8')]
        return InteractiveConsole.runsource(self, source, *args)

    def raw_input(self, *args):
        line = InteractiveConsole.raw_input(self, *args)
        if line == EDIT_CMD:
            fd, tmpfl = mkstemp('.py')
            os.write(fd, b'\n'.join(self.last_buffer))
            os.close(fd)
            os.system('%s %s' % (EDITOR, tmpfl))
            line = open(tmpfl).read()
            os.unlink(tmpfl)
            tmpfl = ''
            lines = line.split('\n')
            for i in range(len(lines) - 1):
                self.push(lines[i])
            line = lines[-1]
        return line


c = EditableBufferInteractiveConsole(locals=locals())
c.interact(banner=WELCOME)

# Exit the Python shell on exiting the InteractiveConsole
sys.exit()

